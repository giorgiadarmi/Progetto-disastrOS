1) modifica file disastrOS_resource.h identifico se la risorsa è una risorsa standarda (0) se è un messaggio di coda (1)
   aggiungo nome al messaggio di coda con campo name, per identificare una determinata coda tramite un punatatore

2) di conseguenza modifico disastrOS_resource.c aggiungendo il campo name come puntatore 

3) aggiungo il file disastrOS_msgqueue.h contiene tutte le strutture dati necessarie per implementare una
   coda di messaggi, in cui le strutture dati per implementare una coda di messaggi
 testo del messaggio=Text, messaggio=Message, sottocoda prefissata, prioritaria= Subqueue, coda di messaggi= MsgQueue e 
 riferimento alla coda di messaggi= MsgQueuePtr
 L'allocazione avviene tramite SLAB allocator
 in base alle priorità dei messaggi vengono inserite delle sottocode di priorità, in base alla priorità assegnata dal sistema
 implemento anche le altre strutture dati. Ogni struttura dati viene: definita, inizializzata, allocata e deallocata (free), stampata
 viene definita eventuale lista di messaggi o di code di messaggi
 aggiungiamo la funzione MsgQueuePtr * MsgQueuePtrList_findByName per la ricerca di coda tramite il nome. 

4) di conseguenza aggiungo disastrOS_msg_queue.c e inserisco la costante DSOS_MSG_QUEUE_RESOURCE per impostare il tipo di risorsa.
 In cui definiamo le varie macro assegnate alle varie strutture dati corrispondi (text, message, subqueue, msgqueue e puntatore a msgqueue)
 con i tre campi corrispondenti:
#define strutturadati_SIZE sizeof(strutturadati)
#define strutturadati_MEM_SIZE (sizeof(strutturadati) + sizeof(int))
#define strutturadati_BUFFER_SIZE MAX_NUM_strutturadati * strutturadati_MEM_SIZE
 
 Allochiamo le risorse in base a quanto descritto nel file: disastrOS_resource.c
 static char _resources_buffer[strutturadati_BUFFER_SIZE];
 static PoolAllocator _resources_allocator;
 per ognuno e anche Resource_init, Resource_alloc, Resource_free, Resource_print, ResourceList_print
 
Che poi utilizzo per il pool allocator,
per ogni struttura dati associo le funzioni di poolallocator
PER TEXT (init, alloc, free)
PER MESSAGE (init, alloc, free, print, printlist)
PER SUBQUEUE (init, alloc, free, print)
PER MSGQUEUE (init, alloc, free, print)
PER PTR MSGQUEUE (init, alloc, free, print, printlist)



